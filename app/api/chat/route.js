import fs from "fs";
import path from "path";
import Fuse from "fuse.js";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { getNextApiKey, markKeyError, resetKeyErrors } from "../../../lib/gemini-rotator.js";

async function callGeminiAPI(prompt) {
  const maxRetries = 3;
  let lastError = null;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    let currentApiKey = null;
    
    try {
      // L·∫•y API key ti·∫øp theo (rotation)
      currentApiKey = getNextApiKey();
      
      if (!currentApiKey) {
        console.error('‚ùå Missing GEMINI_API_KEY in .env.local');
        return 'ƒêang t·∫°m th·ªùi kh√¥ng th·ªÉ k·∫øt n·ªëi d·ªãch v·ª• AI. Vui l√≤ng th·ª≠ l·∫°i sau.';
      }

      // Kh·ªüi t·∫°o Gemini AI v·ªõi API key
      const genAI = new GoogleGenerativeAI(currentApiKey);
      // S·ª≠ d·ª•ng model m·ªõi nh·∫•t: gemini-2.0-flash-exp
      const model = genAI.getGenerativeModel({ 
        model: "gemini-2.0-flash-exp",
        generationConfig: {
          temperature: 0.7,
          topP: 0.95,
          topK: 40,
          maxOutputTokens: 2048,
        }
      });

      console.log(`üîÑ Attempt ${attempt}/${maxRetries} - Calling Gemini 2.0 Flash with prompt length:`, String(prompt).length);

      // G·ªçi API ƒë·ªÉ t·∫°o n·ªôi dung
      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      console.log('‚úÖ Gemini 2.0 Flash response received successfully');
      
      // Reset error count khi th√†nh c√¥ng
      resetKeyErrors(currentApiKey);
      
      return text;

    } catch (error) {
      lastError = error;
      console.error(`‚ùå Attempt ${attempt}/${maxRetries} failed:`, error.message);
      
      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
      if (error.message?.includes('API key') || error.message?.includes('API_KEY_INVALID')) {
        return 'L·ªói x√°c th·ª±c API key. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.';
      }
      if (error.message?.includes('blocked') || error.message?.includes('safety')) {
        return 'Xin l·ªói, n·ªôi dung n√†y kh√¥ng th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω. Vui l√≤ng th·ª≠ c√¢u h·ªèi kh√°c.';
      }
      
      // N·∫øu l√† l·ªói 503 ho·∫∑c overloaded, ƒë√°nh d·∫•u key l·ªói v√† th·ª≠ key kh√°c
      if (error.message?.includes('503') || 
          error.message?.includes('429') ||
          error.message?.includes('overloaded') ||
          error.message?.includes('quota')) {
        
        // ƒê√°nh d·∫•u key hi·ªán t·∫°i b·ªã l·ªói
        if (currentApiKey) {
          markKeyError(currentApiKey, error);
        }
        
        if (attempt < maxRetries) {
          // Exponential backoff: 1s, 2s, 4s (ng·∫Øn h∆°n v√¨ c√≥ rotation)
          const delay = Math.pow(2, attempt - 1) * 1000;
          console.log(`‚è≥ Switching to next API key and retrying in ${delay}ms...`);
          await new Promise(resolve => setTimeout(resolve, delay));
          continue; // Th·ª≠ key ti·∫øp theo
        }
        
        // H·∫øt retries
        return 'H·ªá th·ªëng ƒëang qu√° t·∫£i do nhi·ªÅu ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i sau 1-2 ph√∫t. üôè';
      }
      
      // L·ªói kh√°c
      if (attempt === maxRetries) {
        return `ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu: ${error.message}`;
      }
    }
  }
  
  return `ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu: ${lastError?.message || 'Unknown error'}`;
}

// H√†m ph√°t hi·ªán m·ª©c ƒë·ªô kh·∫©n c·∫•p
function detectEscalationLevel(text) {
  const redKeywords = [
    't·ª± h·∫°i', 't·ª± t·ª≠', 'mu·ªën ch·∫øt', 'kh√¥ng mu·ªën s·ªëng', 't·ª± l√†m ƒëau', 
    'b·∫°o l·ª±c', 'ƒë√°nh ƒë·∫≠p', 'l·∫°m d·ª•ng', 'b·ªã h√†nh h·∫°', 'b·ªã ƒëe d·ªça',
    'nguy hi·ªÉm', 'kh·∫©n c·∫•p', 'c·ª©u em', 'help me'
  ];
  
  const yellowKeywords = [
    'cƒÉng th·∫≥ng', '√°p l·ª±c', 'stress', 'lo l·∫Øng k√©o d√†i', 'm·∫•t ng·ªß nhi·ªÅu ng√†y',
    'b·ªã b·∫Øt n·∫°t', 'b·ªã t·∫©y chay', 'b·ªã tr√™u ch·ªçc', 'm√¢u thu·∫´n', 'xung ƒë·ªôt',
    'c√£i nhau', 'b·ªë m·∫π c√£i nhau', 'gia ƒë√¨nh', 'bu·ªìn nhi·ªÅu ng√†y'
  ];
  
  const lowerText = text.toLowerCase();
  
  if (redKeywords.some(kw => lowerText.includes(kw))) {
    return 'red';
  }
  if (yellowKeywords.some(kw => lowerText.includes(kw))) {
    return 'yellow';
  }
  return 'green';
}

// H√†m tr√≠ch xu·∫•t Q&A t·ª´ text
function extractQA(text) {
  const qMatch = text.match(/C√¢u h·ªèi th∆∞·ªùng g·∫∑p:\s*([^\n]+)/);
  const aMatch = text.match(/C√¢u tr·∫£ l·ªùi m·∫´u:\s*(.+?)(?=\nNg∆∞·ªùi d√πng m·ª•c ti√™u:|$)/s);
  
  return {
    question: qMatch ? qMatch[1].trim() : '',
    answer: aMatch ? aMatch[1].trim() : ''
  };
}

// H√†m t√¨m ki·∫øm RAG n√¢ng cao
function searchRAG(userQuery, ragData) {
  // Chu·∫©n h√≥a input
  function normalize(str) {
    return str.toLowerCase()
      .replace(/[.,!?;:()\[\]"'\-]/g, "")
      .replace(/\s+/g, " ")
      .trim();
  }
  
  const normalizedQuery = normalize(userQuery);
  
  // 1. L·∫•y policies v√† scenarios quan tr·ªçng
  const policies = ragData.filter(item => 
    item.type === 'policy' && item.title && 
    (item.title.includes('POLICY') || item.title.includes('ESCALATION'))
  );
  
  // 2. T√¨m ki·∫øm trong FAQ (Excel rows)
  const faqs = ragData.filter(item => 
    item.type === 'row' && 
    item.text && 
    item.text.includes('C√¢u h·ªèi th∆∞·ªùng g·∫∑p')
  );
  
  // 3. T√¨m ki·∫øm trong documents m·ªõi (t·ª´ Word/Excel)
  const documents = ragData.filter(item => 
    item.category === 'document' && 
    item.answer
  );
  
  // Chu·∫©n b·ªã d·ªØ li·ªáu cho Fuse.js
  const fuseData = [
    // FAQ t·ª´ Excel c≈©
    ...faqs.map(item => {
      const qa = extractQA(item.text);
      return {
        ...item,
        normText: normalize(item.text),
        normQuestion: normalize(qa.question),
        question: qa.question,
        answer: qa.answer,
        source: 'faq'
      };
    }),
    // Documents m·ªõi
    ...documents.map(item => ({
      ...item,
      normText: normalize(item.answer || ''),
      normQuestion: normalize(item.question || ''),
      question: item.question || '',
      answer: item.answer || '',
      source: 'document'
    }))
  ];
  
  // T√¨m ki·∫øm v·ªõi Fuse.js (fuzzy matching)
  const fuse = new Fuse(fuseData, {
    keys: [
      { name: 'normQuestion', weight: 0.5 },
      { name: 'normText', weight: 0.3 },
      { name: 'keywords', weight: 0.2 }
    ],
    threshold: 0.4,
    includeScore: true,
    minMatchCharLength: 3
  });
  
  const fuseResults = fuse.search(normalizedQuery);
  
  // 3. T√¨m ki·∫øm templates ph√π h·ª£p
  const templates = ragData.filter(item => 
    item.type === 'template' && 
    item.text
  );
  
  // 4. T√¨m scenarios ph√π h·ª£p theo level
  const level = detectEscalationLevel(userQuery);
  const scenarios = ragData.filter(item => 
    item.type === 'scenario' && 
    item.level === level
  );
  
  return {
    level,
    policies,
    topMatches: fuseResults.slice(0, 3),
    templates,
    scenarios,
    allFaqs: fuseData
  };
}

// H√†m x√¢y d·ª±ng context t·ª´ Smart Retrieval (T·ªêI ∆ØU - GI·∫¢M TOKEN)
function buildSmartContext(smartResults, userQuery) {
  if (!smartResults.results || smartResults.results.length === 0) {
    return '';
  }
  
  let context = '=== TH√îNG TIN TR∆Ø·ªúNG ===\n';
  let itemCount = 0;
  const maxItems = 3; // Gi·ªõi h·∫°n 3 k·∫øt qu·∫£ ƒë·ªÉ gi·∫£m token
  
  for (const result of smartResults.results) {
    if (itemCount >= maxItems) break;
    
    const data = result.data;
    
    // 1. LI√äN H·ªÜ (Compact)
    if (data.contact) {
      context += `üìû ${data.contact.class}: ${data.contact.name} - ${data.contact.phone}\n`;
      itemCount++;
    }
    // 2. QUY ƒê·ªäNH CH·∫§M ƒêI·ªÇM (Compact)
    else if (data.sodb_scoring) {
      context += `üìã S·ªï ƒë·∫ßu b√†i: ${data.sodb_scoring.total_per_period} ƒëi·ªÉm/ti·∫øt (H·ªçc t·∫≠p, K·ª∑ lu·∫≠t, V·ªá sinh, Chuy√™n c·∫ßn: m·ªói ${data.sodb_scoring.criteria[0]?.max} ƒëi·ªÉm)\n`;
      itemCount++;
    }
    // 3. SAO ƒê·ªé (Compact)
    else if (data.saodo_rules) {
      context += `‚≠ê Sao ƒë·ªè: N·ªôp ${data.saodo_rules.submission}\n`;
      itemCount++;
    }
    // 4. THI ƒêUA (Compact)
    else if (data.class_competition) {
      context += `üèÜ Thi ƒëua: ${data.class_competition.weekly_formula}\n`;
      itemCount++;
    }
    // 5. L·ªäCH TR·ª∞C (Compact)
    else if (data.duty && smartResults.details?.weekday) {
      const day = smartResults.details.weekday;
      const schedule = data.duty.weekly?.[day];
      if (schedule) {
        context += `üìÖ ${day}: S√°ng ${schedule.morning}, Chi·ªÅu ${schedule.afternoon}\n`;
        itemCount++;
      }
    }
    // 6. PH√íNG H·ªåC (Compact)
    else if (data.rooms && smartResults.details?.class && data._foundRoom) {
      context += `üè´ L·ªõp ${smartResults.details.class}: Ph√≤ng ${data._foundRoom}\n`;
      itemCount++;
    }
    // 7. H√íA NH·∫¨P (Compact)
    else if (data.inclusive) {
      context += `‚ôø Gi√°o d·ª•c h√≤a nh·∫≠p: Li√™n h·ªá ${data.inclusive.contacts?.deputy_principal_inclusive || 'BGH'}\n`;
      itemCount++;
    }
    // 8. D·ªÆ LI·ªÜU RAW (Compact)
    else if (data.text) {
      const preview = data.text.substring(0, 150).replace(/\n/g, ' ');
      context += `üìÑ ${data.title || 'Th√¥ng tin'}: ${preview}...\n`;
      itemCount++;
    }
  }
  
  return context + '\n';
}

// H√†m x√¢y d·ª±ng context cho AI
function buildAIContext(searchResults, userQuery) {
  const { level, policies, topMatches, templates, scenarios } = searchResults;
  
  let context = '';
  
  // 1. Th√™m policy v√† quy ƒë·ªãnh
  if (policies.length > 0) {
    context += '=== QUY ƒê·ªäNH V√Ä NGUY√äN T·∫ÆC ===\n';
    policies.forEach(p => {
      context += `${p.text}\n\n`;
    });
  }
  
  // 2. Th√™m th√¥ng tin v·ªÅ m·ª©c ƒë·ªô
  context += `=== M·ª®C ƒê·ªò T√åNH HU·ªêNG: ${level.toUpperCase()} ===\n`;
  if (level === 'red') {
    context += 'C·∫¢NH B√ÅO: ƒê√¢y l√† t√¨nh hu·ªëng KH·∫®N C·∫§P c·∫ßn chuy·ªÉn tuy·∫øn ngay!\n';
    context += 'Li√™n h·ªá: GVCN 0xxx-xxx-xxx, T·ªïng ƒë√†i 111\n\n';
  } else if (level === 'yellow') {
    context += 'L∆ØU √ù: T√¨nh hu·ªëng c·∫ßn theo d√µi v√† c√≥ th·ªÉ c·∫ßn g·∫∑p GVCN/CVTL\n\n';
  } else {
    context += 'T√¨nh hu·ªëng c√≥ th·ªÉ t·ª± tr·ª£ gi√∫p v·ªõi h∆∞·ªõng d·∫´n ph√π h·ª£p\n\n';
  }
  
  // 3. Th√™m c√°c c√¢u tr·∫£ l·ªùi t∆∞∆°ng t·ª± nh·∫•t
  if (topMatches.length > 0) {
    context += '=== C√ÅC T√åNH HU·ªêNG T∆Ø∆†NG T·ª∞ ===\n';
    topMatches.forEach((match, idx) => {
      const item = match.item;
      context += `\n[T√¨nh hu·ªëng ${idx + 1}] (ƒê·ªô kh·ªõp: ${(1 - match.score).toFixed(2)})\n`;
      context += `C√¢u h·ªèi: ${item.question}\n`;
      context += `Tr·∫£ l·ªùi: ${item.answer}\n`;
    });
    context += '\n';
  }
  
  // 4. Th√™m templates n·∫øu c√≥ li√™n quan
  const relevantTemplates = templates.filter(t => {
    const tLower = t.text.toLowerCase();
    const qLower = userQuery.toLowerCase();
    return (
      (qLower.includes('k·∫ø ho·∫°ch') && tLower.includes('k·∫ø ho·∫°ch')) ||
      (qLower.includes('√¥n') && tLower.includes('√¥n')) ||
      (qLower.includes('t·∫≠p trung') && tLower.includes('timebox')) ||
      (qLower.includes('xung ƒë·ªôt') && tLower.includes('conflict'))
    );
  });
  
  if (relevantTemplates.length > 0) {
    context += '=== M·∫™U H∆Ø·ªöNG D·∫™N ===\n';
    relevantTemplates.forEach(t => {
      context += `${t.text}\n\n`;
    });
  }
  
  return context;
}

export async function POST(request) {
  const body = await request.json().catch(() => ({}));
  const messages = body?.messages ?? [];
  const userRole = body?.userRole || 'student'; // 'student', 'teacher', 'parent'
  const isEmergency = body?.isEmergency || false;
  const last = messages[messages.length - 1]?.content || "";

  if (!last || last.trim() === "") {
    return new Response(JSON.stringify({ 
      reply: "Ch√†o b·∫°n! M√¨nh l√† tr·ª£ l√Ω AI c·ªßa tr∆∞·ªùng. B·∫°n c√≥ th·ªÉ chia s·∫ª ƒëi·ªÅu g√¨ ƒëang bƒÉn khoƒÉn kh√¥ng?" 
    }), {
      headers: { "Content-Type": "application/json" },
      status: 200,
    });
  }

  // ========== B∆Ø·ªöC 1: T√åM KI·∫æM TH√îNG MINH (DIRECT CALL) ==========
  let smartResults = null;
  try {
    // G·ªçi tr·ª±c ti·∫øp h√†m thay v√¨ fetch ƒë·ªÉ tr√°nh l·ªói internal request
    const { searchSmartRetrieval } = await import('./smart-retrieval-lib.js');
    smartResults = await searchSmartRetrieval(last);
    
    if (smartResults && smartResults.results?.length > 0) {
      console.log('‚úÖ Smart retrieval:', {
        intent: smartResults.intent,
        resultsCount: smartResults.results.length
      });
    }
  } catch (error) {
    console.error('‚ö†Ô∏è Smart retrieval failed, fallback to old method:', error.message);
  }

  // ========== B∆Ø·ªöC 2: FALLBACK - T√åM KI·∫æM RAG C≈® ==========
  const ragPath = path.join(process.cwd(), "app/public/data/rag_all.json");
  let ragData = [];
  try {
    ragData = JSON.parse(fs.readFileSync(ragPath, "utf8"));
    console.log(`Loaded ${ragData.length} RAG entries`);
  } catch (error) {
    console.error('Error loading RAG data:', error);
  }

  // T√¨m ki·∫øm RAG (v·∫´n gi·ªØ ƒë·ªÉ backup)
  const searchResults = searchRAG(last, ragData);
  console.log('Search results:', {
    level: searchResults.level,
    topMatchesCount: searchResults.topMatches.length,
    topMatch: searchResults.topMatches[0]?.item?.question
  });

  // ========== B∆Ø·ªöC 3: K·∫æT H·ª¢P CONTEXT ==========
  let context = '';
  
  // ∆Øu ti√™n smart retrieval n·∫øu c√≥ k·∫øt qu·∫£ t·ªët
  if (smartResults && smartResults.results?.length > 0) {
    const smartContext = buildSmartContext(smartResults, last);
    if (smartContext && smartContext.length > 50) {
      context = smartContext + '\n\n';
      console.log('üìå Using smart context:', smartContext.substring(0, 100) + '...');
    }
  }
  
  // B·ªï sung context t·ª´ RAG c≈©
  const ragContext = buildAIContext(searchResults, last);
  context += ragContext;
  
  const level = searchResults.level;
  
  // T√πy ch·ªânh prompt theo vai tr√≤
  const roleConfig = {
    student: {
      title: 'H·ªåC SINH',
      tone: 'Th√¢n thi·ªán, t√¥n tr·ªçng, kh√¥ng ph√°n x√©t, g·ªçi h·ªçc sinh l√† "em"',
      focus: 'h·ªçc t·∫≠p, t√¢m l√Ω, k·ªπ nƒÉng s·ªëng, v√† c√°c v·∫•n ƒë·ªÅ h·ªçc ƒë∆∞·ªùng',
      specialNote: '- N·∫øu ph√°t hi·ªán d·∫•u hi·ªáu t√¢m l√Ω n·∫∑ng (t·ª± h·∫°i, b·∫°o l·ª±c, l·∫°m d·ª•ng): Thu th·∫≠p th√¥ng tin h·ªçc sinh (t√™n, l·ªõp) v√† khuy·∫øn ngh·ªã li√™n h·ªá GVCN/ph·ª• huynh ngay\n- N·∫øu l√† v·∫•n ƒë·ªÅ h·ªçc t·∫≠p: ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ, kh·∫£ thi'
    },
    teacher: {
      title: 'GI√ÅO VI√äN',
      tone: 'Chuy√™n nghi·ªáp, h·ªó tr·ª£, t√¥n tr·ªçng, x∆∞ng h√¥ "th·∫ßy/c√¥" v√† "m√¨nh"',
      focus: 'ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y, qu·∫£n l√Ω l·ªõp h·ªçc, x·ª≠ l√Ω t√¨nh hu·ªëng h·ªçc sinh, quy ƒë·ªãnh nh√† tr∆∞·ªùng',
      specialNote: '- Cung c·∫•p c√°c ph∆∞∆°ng ph√°p s∆∞ ph·∫°m hi·ªán ƒë·∫°i\n- G·ª£i √Ω c√°ch x·ª≠ l√Ω t√¨nh hu·ªëng c·ª• th·ªÉ v·ªõi h·ªçc sinh\n- H∆∞·ªõng d·∫´n quy tr√¨nh h√†nh ch√≠nh n·∫øu c·∫ßn'
    },
    parent: {
      title: 'PH·ª§ HUYNH',
      tone: 'T√¥n tr·ªçng, th·∫•u hi·ªÉu, h·ªó tr·ª£, x∆∞ng h√¥ "ph·ª• huynh" v√† "m√¨nh"',
      focus: 'theo d√µi h·ªçc t·∫≠p c·ªßa con, giao ti·∫øp v·ªõi nh√† tr∆∞·ªùng, h·ªó tr·ª£ con h·ªçc t·∫≠p v√† ph√°t tri·ªÉn',
      specialNote: '- H∆∞·ªõng d·∫´n c√°ch theo d√µi v√† h·ªó tr·ª£ con h·ªçc t·∫≠p t·∫°i nh√†\n- G·ª£i √Ω c√°ch giao ti·∫øp v·ªõi gi√°o vi√™n v√† nh√† tr∆∞·ªùng\n- T∆∞ v·∫•n v·ªÅ t√¢m l√Ω v√† ph√°t tri·ªÉn c·ªßa tr·∫ª THCS'
    }
  };

  const config = roleConfig[userRole] || roleConfig.student;

  // T·∫°o prompt cho Gemini
  let prompt = '';
  
  if (isEmergency) {
    // Prompt ƒë·∫∑c bi·ªát cho t√¨nh hu·ªëng kh·∫©n c·∫•p
    prompt = `${context}

=== T√åNH HU·ªêNG KH·∫®N C·∫§P ===
ƒê√¢y l√† t√¨nh hu·ªëng kh·∫©n c·∫•p t·ª´ ${config.title}

L·ªãch s·ª≠ h·ªôi tho·∫°i:
${messages.map(m => `${m.role === 'user' ? 'Ng∆∞·ªùi d√πng' : 'AI'}: ${m.content}`).join('\n')}

C√¢u h·ªèi/Th√¥ng tin m·ªõi nh·∫•t:
${last}

=== H∆Ø·ªöNG D·∫™N X·ª¨ L√ù KH·∫®N C·∫§P ===
- Vai tr√≤: Tr·ª£ l√Ω AI x·ª≠ l√Ω t√¨nh hu·ªëng kh·∫©n c·∫•p cho ${config.title}
- Gi·ªçng ƒëi·ªáu: ${config.tone}, nh∆∞ng th√™m s·ª± quan t√¢m v√† kh·∫©n tr∆∞∆°ng
- M·ª®C ƒê·ªò: ${level.toUpperCase()} - KH·∫®N C·∫§P

NHI·ªÜM V·ª§:
1. Thu th·∫≠p th√¥ng tin quan tr·ªçng (n·∫øu ch∆∞a c√≥):
   ${userRole === 'student' ? '- T√™n h·ªçc sinh\n   - L·ªõp\n   - V·∫•n ƒë·ªÅ c·ª• th·ªÉ\n   - M·ª©c ƒë·ªô nguy hi·ªÉm' : ''}
   ${userRole === 'teacher' ? '- T√¨nh hu·ªëng c·ª• th·ªÉ\n   - H·ªçc sinh li√™n quan (n·∫øu c√≥)\n   - M·ª©c ƒë·ªô nghi√™m tr·ªçng' : ''}
   ${userRole === 'parent' ? '- T√™n v√† l·ªõp c·ªßa con\n   - V·∫•n ƒë·ªÅ c·ª• th·ªÉ\n   - M·ª©c ƒë·ªô kh·∫©n c·∫•p' : ''}

2. ƒê√°nh gi√° m·ª©c ƒë·ªô nghi√™m tr·ªçng:
   - RED (C·ª±c k·ª≥ nghi√™m tr·ªçng): T·ª± h·∫°i, b·∫°o l·ª±c, nguy hi·ªÉm t√≠nh m·∫°ng ‚Üí Y√™u c·∫ßu li√™n h·ªá ngay 111 ho·∫∑c c√°n b·ªô t∆∞ v·∫•n tr∆∞·ªùng
   - YELLOW (C·∫ßn h·ªó tr·ª£): C·∫ßn can thi·ªáp trong 24h ‚Üí ƒê·ªÅ xu·∫•t g·∫∑p c√°n b·ªô t∆∞ v·∫•n tr∆∞·ªùng ho·∫∑c GVCN
   - GREEN (Quan tr·ªçng): C·∫ßn theo d√µi ‚Üí H∆∞·ªõng d·∫´n v√† h·∫πn g·∫∑p

3. ƒê∆∞a ra h√†nh ƒë·ªông c·ª• th·ªÉ:
   - Khuy·∫øn ngh·ªã li√™n h·ªá c√°n b·ªô t∆∞ v·∫•n tr∆∞·ªùng THCS Nguy·ªÖn Hu·ªá ho·∫∑c GVCN c·ªßa l·ªõp
   - B∆∞·ªõc ti·∫øp theo r√µ r√†ng
   - ƒê·ªông vi√™n v√† ƒë·∫£m b·∫£o s·∫Ω ƒë∆∞·ª£c h·ªó tr·ª£

4. T·ªïng h·ª£p th√¥ng tin ƒë√£ thu th·∫≠p ƒë∆∞·ª£c (n·∫øu c√≥) ·ªü cu·ªëi c√¢u tr·∫£ l·ªùi theo format:
   [TH√îNG TIN THU TH·∫¨P]
   - T√™n: ...
   - L·ªõp: ...
   - V·∫•n ƒë·ªÅ: ...
   - M·ª©c ƒë·ªô: ...
   [/TH√îNG TIN THU TH·∫¨P]

H√£y tr·∫£ l·ªùi m·ªôt c√°ch th·∫•u hi·ªÉu, kh·∫©n tr∆∞∆°ng nh∆∞ng kh√¥ng g√¢y ho·∫£ng lo·∫°n:`;
  } else {
    // Prompt b√¨nh th∆∞·ªùng
    prompt = `${context}

=== C√ÇU H·ªéI C·ª¶A ${config.title} ===
${last}

=== H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI ===
- Vai tr√≤: Tr·ª£ l√Ω AI h·ªó tr·ª£ ${config.title} v·ªÅ ${config.focus}
- Gi·ªçng ƒëi·ªáu: ${config.tone}
- D·ª±a tr√™n c√°c t√¨nh hu·ªëng t∆∞∆°ng t·ª± v√† quy ƒë·ªãnh tr∆∞·ªùng h·ªçc ·ªü tr√™n
- M·ª©c ƒë·ªô t√¨nh hu·ªëng: ${level.toUpperCase()}
  ${level === 'red' ? '‚Üí ∆Øu ti√™n an to√†n, ƒë·ªÅ xu·∫•t li√™n h·ªá c√°n b·ªô t∆∞ v·∫•n tr∆∞·ªùng ho·∫∑c ƒë∆∞·ªùng d√¢y n√≥ng 111 ngay' : ''}
  ${level === 'yellow' ? '‚Üí G·ª£i √Ω gi·∫£i ph√°p v√† khuy·∫øn ngh·ªã g·∫∑p c√°n b·ªô t∆∞ v·∫•n tr∆∞·ªùng ho·∫∑c GVCN' : ''}
  ${level === 'green' ? '‚Üí Cung c·∫•p h∆∞·ªõng d·∫´n c·ª• th·ªÉ v√† ƒë·ªông vi√™n. N·∫øu c·∫ßn h·ªó tr·ª£ th√™m, c√≥ th·ªÉ li√™n h·ªá c√°n b·ªô t∆∞ v·∫•n tr∆∞·ªùng ho·∫∑c GVCN' : ''}

TH√îNG TIN LI√äN H·ªÜ H·ªñ TR·ª¢:
- C√°n b·ªô t∆∞ v·∫•n tr∆∞·ªùng THCS Nguy·ªÖn Hu·ªá
- Gi√°o vi√™n ch·ªß nhi·ªám c·ªßa l·ªõp (n·∫øu bi·∫øt l·ªõp)
- ƒê∆∞·ªùng d√¢y n√≥ng: 111

L∆ØU √ù ƒê·ªêI V·ªöI ${config.title}:
${config.specialNote}

- Tr·∫£ l·ªùi ng·∫Øn g·ªçn (3-5 c√¢u), c√≥ b∆∞·ªõc h√†nh ƒë·ªông r√µ r√†ng
- K·∫øt th√∫c b·∫±ng c√¢u h·ªèi m·ªü ho·∫∑c l·ªùi ƒë·ªông vi√™n ph√π h·ª£p

H√£y tr·∫£ l·ªùi:`;
  }

  // G·ªçi Gemini API
  const aiReply = await callGeminiAPI(prompt);
  
  return new Response(JSON.stringify({ 
    reply: aiReply,
    metadata: {
      level: searchResults.level,
      matchCount: searchResults.topMatches.length,
      topMatch: searchResults.topMatches[0]?.item?.question || null
    }
  }), {
    headers: { "Content-Type": "application/json" },
    status: 200,
  });
}
