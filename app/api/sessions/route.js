/**
 * =====================================================
 * SESSIONS API - SUPABASE VERSION
 * =====================================================
 * API endpoints ƒë·ªÉ qu·∫£n l√Ω chat sessions v·ªõi Supabase
 * - POST: T·∫°o ho·∫∑c c·∫≠p nh·∫≠t session
 * - GET: L·∫•y danh s√°ch sessions
 * - DELETE: X√≥a session
 * =====================================================
 */

export const runtime = "nodejs";

import { NextResponse } from "next/server";
import { supabaseAdmin } from "../../../lib/supabase";

/**
 * T√≥m t·∫Øt n·ªôi dung chat b·∫±ng Gemini AI
 */
async function generateSummary(messages) {
  try {
    if (!messages || messages.length === 0) {
      return 'Chat m·ªõi';
    }
    
    // L·ªçc ch·ªâ l·∫•y tin nh·∫Øn t·ª´ user
    const userMessages = messages.filter(m => 
      m.role === 'user' || m.sender === 'user'
    );
    
    if (userMessages.length === 0) {
      return 'Chat m·ªõi';
    }
    
    // L·∫•y t·∫•t c·∫£ c√¢u h·ªèi c·ªßa user (b·ªè qua "T√¥i l√†...", s·ªë l·ªõp)
    const realQuestions = userMessages.filter(m => {
      const content = m.content || m.text || '';
      // B·ªè qua "T√¥i l√†..."
      if (content.startsWith('T√¥i l√†') || content.startsWith('t√¥i l√†')) {
        return false;
      }
      // B·ªè qua s·ªë l·ªõp
      if (/^\d{1,2}\/\d{1,2}$/.test(content.trim())) {
        return false;
      }
      return true;
    });
    
    if (realQuestions.length === 0) {
      return 'Chat m·ªõi';
    }
    
    // N·∫øu ch·ªâ c√≥ 1 c√¢u h·ªèi, d√πng n√≥ lu√¥n
    if (realQuestions.length === 1) {
      const content = realQuestions[0].content || realQuestions[0].text || '';
      return content.length > 60 ? content.substring(0, 60) + '...' : content;
    }
    
    // N·∫øu c√≥ nhi·ªÅu c√¢u h·ªèi, g·ªçi Gemini t√≥m t·∫Øt
    try {
      const { GoogleGenerativeAI } = require('@google/generative-ai');
      const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
      const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
      
      const questionsText = realQuestions
        .map(m => m.content || m.text)
        .join('\n- ');
      
      const prompt = `T√≥m t·∫Øt ng·∫Øn g·ªçn (t·ªëi ƒëa 60 k√Ω t·ª±) n·ªôi dung ch√≠nh c·ªßa c√°c c√¢u h·ªèi sau:\n\n- ${questionsText}\n\nCh·ªâ tr·∫£ v·ªÅ c√¢u t√≥m t·∫Øt, kh√¥ng gi·∫£i th√≠ch.`;
      
      const result = await model.generateContent(prompt);
      const summary = result.response.text().trim();
      
      return summary.length > 60 ? summary.substring(0, 60) + '...' : summary;
    } catch (aiError) {
      console.warn('Gemini summarization failed, using first question:', aiError.message);
      // Fallback: D√πng c√¢u h·ªèi ƒë·∫ßu ti√™n
      const content = realQuestions[0].content || realQuestions[0].text || '';
      return content.length > 60 ? content.substring(0, 60) + '...' : content;
    }
  } catch (error) {
    console.error('Error generating summary:', error);
    return 'Chat m·ªõi';
  }
}

/**
 * POST /api/sessions
 * T·∫°o session m·ªõi ho·∫∑c c·∫≠p nh·∫≠t session hi·ªán c√≥
 */
export async function POST(req) {
  try {
    const { sessionId, messages, userRole, userClass, emergencyData } = await req.json();

    // T·∫°o summary t·ª´ messages
    const summary = await generateSummary(messages || []);

    // N·∫øu kh√¥ng c√≥ sessionId, t·∫°o session m·ªõi
    if (!sessionId) {
      const { data: newSession, error } = await supabaseAdmin
        .from('chat_sessions')
        .insert({
          user_role: userRole || 'student',
          user_class: userClass || null,
          session_name: summary,
          emergency_level: emergencyData?.level || 'GREEN',
          emergency_keywords: emergencyData?.keywords || [],
          is_emergency: emergencyData?.isEmergency || false,
          total_messages: messages?.length || 0,
          metadata: {
            created_from: 'web',
            initial_messages: messages || []
          }
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error creating session:', error);
        return NextResponse.json(
          { ok: false, error: error.message },
          { status: 500 }
        );
      }

      // L∆∞u messages n·∫øu c√≥
      if (messages && messages.length > 0) {
        const messagesData = messages.map(msg => ({
          session_id: newSession.id,
          sender: msg.sender,
          content: msg.text || msg.content,
          emergency_detected: msg.emergencyDetected || false,
          emergency_level: msg.emergencyLevel || 'GREEN',
          emergency_keywords: msg.emergencyKeywords || [],
          metadata: {
            timestamp: msg.timestamp || new Date().toISOString()
          }
        }));

        const { error: msgError } = await supabaseAdmin
          .from('messages')
          .insert(messagesData);

        if (msgError) {
          console.error('‚ùå Error saving messages:', msgError);
        }
      }

      return NextResponse.json({
        ok: true,
        sessionId: newSession.id,
        session: newSession
      });
    }

    // Ki·ªÉm tra session c√≥ t·ªìn t·∫°i kh√¥ng
    const { data: existingSession, error: fetchError } = await supabaseAdmin
      .from('chat_sessions')
      .select('*')
      .eq('id', sessionId)
      .single();

    // N·∫øu session ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi v·ªõi sessionId ƒë√£ cho
    if (fetchError || !existingSession) {
      const { data: newSession, error: createError } = await supabaseAdmin
        .from('chat_sessions')
        .insert({
          id: sessionId, // D√πng sessionId t·ª´ client
          user_role: userRole || 'student',
          user_class: userClass || null,
          session_name: summary, // D√πng summary thay v√¨ timestamp
          emergency_level: emergencyData?.level || 'GREEN',
          emergency_keywords: emergencyData?.keywords || [],
          is_emergency: emergencyData?.isEmergency || false,
          total_messages: messages?.length || 0,
          metadata: {
            created_from: 'web',
            initial_messages: messages || []
          }
        })
        .select()
        .single();

      if (createError) {
        console.error('‚ùå Error creating session:', createError);
        return NextResponse.json(
          { ok: false, error: createError.message },
          { status: 500 }
        );
      }

      // L∆∞u messages
      if (messages && messages.length > 0) {
        const messagesData = messages.map(msg => ({
          session_id: sessionId,
          sender: msg.role === 'user' ? 'user' : 'bot',
          content: msg.content,
          emergency_detected: msg.emergencyDetected || false,
          emergency_level: msg.emergencyLevel || 'GREEN',
          emergency_keywords: msg.emergencyKeywords || [],
          metadata: {
            timestamp: msg.timestamp || new Date().toISOString()
          }
        }));

        const { error: msgError } = await supabaseAdmin
          .from('messages')
          .insert(messagesData);

        if (msgError) {
          console.error('‚ùå Error saving messages:', msgError);
        }
      }

      return NextResponse.json({
        ok: true,
        sessionId: sessionId,
        session: newSession
      });
    }

    // T·∫°o l·∫°i summary n·∫øu c·∫ßn (khi c√≥ messages m·ªõi)
    let newSummary = existingSession.session_name;
    if (messages && messages.length > 0) {
      // Ch·ªâ t·∫°o l·∫°i summary n·∫øu hi·ªán t·∫°i l√† "Chat m·ªõi" ho·∫∑c "T√¥i l√†..."
      if (
        !existingSession.session_name ||
        existingSession.session_name === 'Chat m·ªõi' ||
        existingSession.session_name.startsWith('T√¥i l√†') ||
        existingSession.session_name.startsWith('Chat ')
      ) {
        newSummary = await generateSummary(messages);
        console.log(`üîÑ Updated summary for ${sessionId}: "${newSummary}"`);
      }
    }

    // C·∫≠p nh·∫≠t th√¥ng tin session
    const { error: updateError } = await supabaseAdmin
      .from('chat_sessions')
      .update({
        session_name: newSummary,
        total_messages: messages?.length || existingSession.total_messages,
        emergency_level: emergencyData?.level || existingSession.emergency_level,
        emergency_keywords: emergencyData?.keywords || existingSession.emergency_keywords,
        is_emergency: emergencyData?.isEmergency || existingSession.is_emergency,
        updated_at: new Date().toISOString()
      })
      .eq('id', sessionId);

    if (updateError) {
      console.error('‚ùå Error updating session:', updateError);
      return NextResponse.json(
        { ok: false, error: updateError.message },
        { status: 500 }
      );
    }

    // L∆∞u messages m·ªõi
    if (messages && messages.length > 0) {
      // L·∫•y s·ªë l∆∞·ª£ng messages hi·ªán c√≥
      const { count } = await supabaseAdmin
        .from('messages')
        .select('*', { count: 'exact', head: true })
        .eq('session_id', sessionId);

      // Ch·ªâ l∆∞u messages m·ªõi (ch∆∞a c√≥ trong DB)
      const newMessages = messages.slice(count || 0);
      
      if (newMessages.length > 0) {
        const messagesData = newMessages.map(msg => ({
          session_id: sessionId,
          sender: msg.role === 'user' ? 'user' : 'bot', // Map role ‚Üí sender
          content: msg.text || msg.content,
          emergency_detected: msg.emergencyDetected || false,
          emergency_level: msg.emergencyLevel || 'GREEN',
          emergency_keywords: msg.emergencyKeywords || [],
          metadata: {
            timestamp: msg.timestamp || new Date().toISOString()
          }
        }));

        const { error: msgError } = await supabaseAdmin
          .from('messages')
          .insert(messagesData);

        if (msgError) {
          console.error('‚ùå Error saving new messages:', msgError);
        }
      }
    }

    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error('‚ùå Session API error:', error);
    return NextResponse.json(
      { ok: false, error: error.message },
      { status: 500 }
    );
  }
}

/**
 * GET /api/sessions
 * L·∫•y danh s√°ch t·∫•t c·∫£ sessions
 * Query params:
 * - role: Filter by user role
 * - emergency: Filter by emergency status
 * - limit: S·ªë l∆∞·ª£ng sessions (default: 100)
 */
export async function GET(req) {
  try {
    const { searchParams } = new URL(req.url);
    const role = searchParams.get('role');
    const emergency = searchParams.get('emergency');
    const limit = parseInt(searchParams.get('limit') || '100');

    let query = supabaseAdmin
      .from('chat_sessions')
      .select(`
        *,
        messages:messages(count)
      `)
      .order('created_at', { ascending: false })
      .limit(limit);

    // Filter by role
    if (role) {
      query = query.eq('user_role', role);
    }

    // Filter by emergency
    if (emergency === 'true') {
      query = query.eq('is_emergency', true);
    }

    const { data: sessions, error } = await query;

    if (error) {
      console.error('‚ùå Error fetching sessions:', error);
      return NextResponse.json(
        { ok: false, error: error.message },
        { status: 500 }
      );
    }

    return NextResponse.json({
      ok: true,
      sessions: sessions || [],
      count: sessions?.length || 0
    });

  } catch (error) {
    console.error('‚ùå GET sessions error:', error);
    return NextResponse.json(
      { ok: false, error: error.message },
      { status: 500 }
    );
  }
}

/**
 * PATCH /api/sessions
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i session (is_processed, processed_at, processed_by)
 */
export async function PATCH(req) {
  try {
    const { id, is_processed, processed_by } = await req.json();

    if (!id) {
      return NextResponse.json(
        { ok: false, error: 'Session ID required' },
        { status: 400 }
      );
    }

    const updateData = {
      is_processed: is_processed,
      updated_at: new Date().toISOString()
    };

    // N·∫øu ƒë√°nh d·∫•u ƒë√£ x·ª≠ l√Ω, l∆∞u th·ªùi gian v√† ng∆∞·ªùi x·ª≠ l√Ω
    if (is_processed) {
      updateData.processed_at = new Date().toISOString();
      if (processed_by) {
        updateData.processed_by = processed_by;
      }
    } else {
      // N·∫øu b·ªè ƒë√°nh d·∫•u, x√≥a th√¥ng tin x·ª≠ l√Ω
      updateData.processed_at = null;
      updateData.processed_by = null;
    }

    const { error } = await supabaseAdmin
      .from('chat_sessions')
      .update(updateData)
      .eq('id', id);

    if (error) {
      console.error('‚ùå Error updating session:', error);
      return NextResponse.json(
        { ok: false, error: error.message },
        { status: 500 }
      );
    }

    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error('‚ùå PATCH session error:', error);
    return NextResponse.json(
      { ok: false, error: error.message },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/sessions
 * X√≥a m·ªôt session (v√† t·∫•t c·∫£ messages li√™n quan)
 */
export async function DELETE(req) {
  try {
    const { id } = await req.json();

    if (!id) {
      return NextResponse.json(
        { ok: false, error: 'Session ID required' },
        { status: 400 }
      );
    }

    // X√≥a session (messages s·∫Ω t·ª± ƒë·ªông x√≥a do CASCADE)
    const { error } = await supabaseAdmin
      .from('chat_sessions')
      .delete()
      .eq('id', id);

    if (error) {
      console.error('‚ùå Error deleting session:', error);
      return NextResponse.json(
        { ok: false, error: error.message },
        { status: 500 }
      );
    }

    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error('‚ùå DELETE session error:', error);
    return NextResponse.json(
      { ok: false, error: error.message },
      { status: 500 }
    );
  }
}
