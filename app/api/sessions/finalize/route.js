/**
 * =====================================================
 * FINALIZE SESSION API
 * =====================================================
 * K·∫øt th√∫c phi√™n chat v√† t·∫°o t√≥m t·∫Øt ch·∫•t l∆∞·ª£ng cao
 * - ƒê·ªçc to√†n b·ªô messages t·ª´ database
 * - G·ªçi Gemini ph√¢n t√≠ch v√† t√≥m t·∫Øt
 * - C·∫≠p nh·∫≠t session_name v·ªõi t√≥m t·∫Øt chi ti·∫øt
 * =====================================================
 */

export const runtime = "nodejs";

import { NextResponse } from "next/server";
import { supabaseAdmin } from "../../../../lib/supabase";
import { GoogleGenerativeAI } from '@google/generative-ai';
import { getNextApiKey, resetKeyErrors } from "../../../../lib/gemini-rotator.js";

/**
 * T·∫°o t√≥m t·∫Øt ch·∫•t l∆∞·ª£ng cao t·ª´ to√†n b·ªô cu·ªôc h·ªôi tho·∫°i
 */
async function generateDetailedSummary(messages, userRole, userClass) {
  try {
    if (!messages || messages.length === 0) {
      return 'Phi√™n chat tr·ªëng';
    }

    // L·ªçc messages th·ª±c s·ª± (b·ªè qua "T√¥i l√†...", s·ªë l·ªõp)
    const realMessages = messages.filter(msg => {
      const content = msg.content || '';
      // B·ªè qua tin nh·∫Øn gi·ªõi thi·ªáu
      if (content.startsWith('T√¥i l√†') || content.startsWith('t√¥i l√†')) {
        return false;
      }
      // B·ªè qua s·ªë l·ªõp
      if (/^\d{1,2}\/\d{1,2}$/.test(content.trim())) {
        return false;
      }
      return true;
    });

    if (realMessages.length === 0) {
      return 'Phi√™n chat gi·ªõi thi·ªáu';
    }

    // N·∫øu ch·ªâ c√≥ 1-2 tin nh·∫Øn, d√πng c√¢u ƒë·∫ßu ti√™n
    if (realMessages.length <= 2) {
      const firstUserMsg = realMessages.find(m => m.sender === 'user');
      if (firstUserMsg) {
        const content = firstUserMsg.content || '';
        return content.length > 80 ? content.substring(0, 80) + '...' : content;
      }
    }

    // T·∫°o transcript ƒë·∫ßy ƒë·ªß
    const transcript = realMessages.map(msg => {
      const role = msg.sender === 'user' ? 'Ng∆∞·ªùi d√πng' : 'Tr·ª£ l√Ω AI';
      return `${role}: ${msg.content}`;
    }).join('\n\n');

    // G·ªçi Gemini ƒë·ªÉ t√≥m t·∫Øt (v·ªõi rotation)
    const apiKey = getNextApiKey();
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });

    const roleText = userRole === 'student' ? 'H·ªçc sinh' : 
                     userRole === 'teacher' ? 'Gi√°o vi√™n' : 'Ph·ª• huynh';
    const classText = userClass ? ` l·ªõp ${userClass}` : '';

    const prompt = `B·∫°n l√† chuy√™n gia ph√¢n t√≠ch cu·ªôc h·ªôi tho·∫°i t√¢m l√Ω h·ªçc ƒë∆∞·ªùng.

TH√îNG TIN:
- Ng∆∞·ªùi d√πng: ${roleText}${classText}
- S·ªë l∆∞·ª£ng tin nh·∫Øn: ${realMessages.length}

CU·ªòC H·ªòI THO·∫†I:
${transcript}

Y√äU C·∫¶U:
T√≥m t·∫Øt cu·ªôc h·ªôi tho·∫°i n√†y trong 1 c√¢u ng·∫Øn g·ªçn (t·ªëi ƒëa 100 k√Ω t·ª±), bao g·ªìm:
1. Ch·ªß ƒë·ªÅ ch√≠nh (v·∫•n ƒë·ªÅ g√¨?)
2. C·∫£m x√∫c/t√¨nh tr·∫°ng (n·∫øu c√≥)
3. K·∫øt qu·∫£ (ƒë√£ gi·∫£i quy·∫øt/ƒëang t∆∞ v·∫•n/c·∫ßn theo d√µi)

V√ç D·ª§ T·ªêT:
- "H·ªçc sinh lo l·∫Øng v·ªÅ k·ª≥ thi, ƒë√£ ƒë∆∞·ª£c t∆∞ v·∫•n k·ªπ thu·∫≠t h·ªçc t·∫≠p"
- "Ph·ª• huynh h·ªèi v·ªÅ l·ªãch h·ªçp v√† s·ªë ƒëi·ªán tho·∫°i GVCN"
- "Gi√°o vi√™n t√¨m hi·ªÉu c√°ch x·ª≠ l√Ω h·ªçc sinh ch·∫≠m ti·∫øn b·ªô"

CH·ªà TR·∫¢ V·ªÄ C√ÇU T√ìM T·∫ÆT, KH√îNG GI·∫¢I TH√çCH TH√äM.`;

    const result = await model.generateContent(prompt);
    const summary = result.response.text().trim();

    // Reset error count khi th√†nh c√¥ng
    resetKeyErrors(apiKey);

    // Gi·ªõi h·∫°n ƒë·ªô d√†i
    return summary.length > 120 ? summary.substring(0, 120) + '...' : summary;

  } catch (error) {
    console.error('‚ùå Error generating detailed summary:', error);
    
    // Fallback: D√πng c√¢u h·ªèi ƒë·∫ßu ti√™n
    const firstUserMsg = messages.find(m => m.sender === 'user');
    if (firstUserMsg) {
      const content = firstUserMsg.content || '';
      return content.length > 80 ? content.substring(0, 80) + '...' : content;
    }
    
    return 'Phi√™n chat ƒë√£ k·∫øt th√∫c';
  }
}

/**
 * POST /api/sessions/finalize
 * K·∫øt th√∫c phi√™n chat v√† t·∫°o t√≥m t·∫Øt
 */
export async function POST(req) {
  try {
    const { sessionId } = await req.json();

    if (!sessionId) {
      return NextResponse.json(
        { ok: false, error: 'Session ID required' },
        { status: 400 }
      );
    }

    console.log(`üîÑ Finalizing session: ${sessionId}`);

    // 1. L·∫•y th√¥ng tin session
    const { data: session, error: sessionError } = await supabaseAdmin
      .from('chat_sessions')
      .select('*')
      .eq('id', sessionId)
      .single();

    if (sessionError || !session) {
      console.error('‚ùå Session not found:', sessionError);
      return NextResponse.json(
        { ok: false, error: 'Session not found' },
        { status: 404 }
      );
    }

    // 2. L·∫•y t·∫•t c·∫£ messages
    const { data: messages, error: messagesError } = await supabaseAdmin
      .from('messages')
      .select('*')
      .eq('session_id', sessionId)
      .order('created_at', { ascending: true });

    if (messagesError) {
      console.error('‚ùå Error fetching messages:', messagesError);
      return NextResponse.json(
        { ok: false, error: 'Error fetching messages' },
        { status: 500 }
      );
    }

    console.log(`üìä Found ${messages?.length || 0} messages`);

    // 3. T·∫°o t√≥m t·∫Øt chi ti·∫øt
    const summary = await generateDetailedSummary(
      messages || [],
      session.user_role,
      session.user_class
    );

    console.log(`‚úÖ Generated summary: "${summary}"`);

    // 4. C·∫≠p nh·∫≠t session
    const { error: updateError } = await supabaseAdmin
      .from('chat_sessions')
      .update({
        session_name: summary,
        ended_at: new Date().toISOString(),
        is_active: false,
        updated_at: new Date().toISOString()
      })
      .eq('id', sessionId);

    if (updateError) {
      console.error('‚ùå Error updating session:', updateError);
      return NextResponse.json(
        { ok: false, error: 'Error updating session' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      ok: true,
      summary: summary,
      messageCount: messages?.length || 0
    });

  } catch (error) {
    console.error('‚ùå Finalize session error:', error);
    return NextResponse.json(
      { ok: false, error: error.message },
      { status: 500 }
    );
  }
}
