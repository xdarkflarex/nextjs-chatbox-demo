// Ki·ªÉm tra tr·∫°ng th√°i Gemini API - Ph√°t hi·ªán l·ªói rate limit v√† c√°c v·∫•n ƒë·ªÅ kh√°c
import { GoogleGenerativeAI } from "@google/generative-ai";
import dotenv from "dotenv";

// Load environment variables
dotenv.config({ path: '.env.local' });

async function checkGeminiStatus() {
  console.log('='.repeat(60));
  console.log('üîç KI·ªÇM TRA TR·∫†NG TH√ÅI GEMINI API');
  console.log('='.repeat(60));
  
  const apiKey = process.env.GEMINI_API_KEY;
  
  // 1. Ki·ªÉm tra API Key
  console.log('\nüìã B∆Ø·ªöC 1: Ki·ªÉm tra API Key');
  console.log('‚îÄ'.repeat(60));
  console.log('‚úì API Key t·ªìn t·∫°i:', !!apiKey);
  console.log('‚úì ƒê·ªô d√†i API Key:', apiKey?.length || 0);
  console.log('‚úì API Key (10 k√Ω t·ª± ƒë·∫ßu):', apiKey?.substring(0, 10));
  console.log('‚úì API Key (10 k√Ω t·ª± cu·ªëi):', apiKey?.substring(apiKey.length - 10));
  
  if (!apiKey) {
    console.error('\n‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong file .env.local');
    console.log('\nüí° H∆∞·ªõng d·∫´n:');
    console.log('   1. T·∫°o file .env.local trong th∆∞ m·ª•c g·ªëc');
    console.log('   2. Th√™m d√≤ng: GEMINI_API_KEY=your_api_key_here');
    console.log('   3. L·∫•y API key t·∫°i: https://aistudio.google.com/app/apikey');
    return;
  }

  // 2. Test c√°c models kh√°c nhau
  const models = [
    { name: 'gemini-2.0-flash-exp', desc: 'Gemini 2.0 Flash (Experimental - M·ªõi nh·∫•t)' },
    { name: 'gemini-1.5-flash', desc: 'Gemini 1.5 Flash (Nhanh, mi·ªÖn ph√≠)' },
    { name: 'gemini-1.5-pro', desc: 'Gemini 1.5 Pro (M·∫°nh h∆°n)' },
    { name: 'gemini-pro', desc: 'Gemini Pro (C≈©)' }
  ];
  
  console.log('\nüìã B∆Ø·ªöC 2: Test c√°c models');
  console.log('‚îÄ'.repeat(60));
  
  let successCount = 0;
  let failedModels = [];
  
  for (const modelInfo of models) {
    try {
      console.log(`\nüîÑ ƒêang test: ${modelInfo.name}`);
      console.log(`   M√¥ t·∫£: ${modelInfo.desc}`);
      
      const genAI = new GoogleGenerativeAI(apiKey);
      const model = genAI.getGenerativeModel({ model: modelInfo.name });
      
      const startTime = Date.now();
      const result = await model.generateContent("Ch√†o b·∫°n, h√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát");
      const response = await result.response;
      const text = response.text();
      const duration = Date.now() - startTime;
      
      console.log(`   ‚úÖ TH√ÄNH C√îNG (${duration}ms)`);
      console.log(`   üìù Ph·∫£n h·ªìi: ${text.substring(0, 100)}${text.length > 100 ? '...' : ''}`);
      successCount++;
      
    } catch (error) {
      console.log(`   ‚ùå TH·∫§T B·∫†I`);
      console.log(`   üìõ L·ªói: ${error.message}`);
      
      // Ph√¢n t√≠ch l·ªói chi ti·∫øt
      if (error.status) {
        console.log(`   üìä HTTP Status: ${error.status}`);
      }
      
      // Ki·ªÉm tra c√°c lo·∫°i l·ªói ph·ªï bi·∫øn
      if (error.message?.includes('quota') || error.message?.includes('RESOURCE_EXHAUSTED')) {
        console.log(`   ‚ö†Ô∏è  NGUY√äN NH√ÇN: ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng (Rate Limit/Quota)`);
        console.log(`   üí° GI·∫¢I PH√ÅP:`);
        console.log(`      - ƒê·ª£i m·ªôt l√∫c r·ªìi th·ª≠ l·∫°i (th∆∞·ªùng reset sau 1 ph√∫t)`);
        console.log(`      - Ki·ªÉm tra quota t·∫°i: https://aistudio.google.com/app/apikey`);
        console.log(`      - T·∫°o API key m·ªõi n·∫øu c·∫ßn`);
      } else if (error.message?.includes('API_KEY_INVALID') || error.message?.includes('API key')) {
        console.log(`   ‚ö†Ô∏è  NGUY√äN NH√ÇN: API Key kh√¥ng h·ª£p l·ªá`);
        console.log(`   üí° GI·∫¢I PH√ÅP:`);
        console.log(`      - Ki·ªÉm tra l·∫°i API key`);
        console.log(`      - T·∫°o API key m·ªõi t·∫°i: https://aistudio.google.com/app/apikey`);
      } else if (error.message?.includes('model') || error.message?.includes('not found')) {
        console.log(`   ‚ö†Ô∏è  NGUY√äN NH√ÇN: Model kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t`);
      } else if (error.message?.includes('blocked') || error.message?.includes('safety')) {
        console.log(`   ‚ö†Ô∏è  NGUY√äN NH√ÇN: N·ªôi dung b·ªã ch·∫∑n b·ªüi b·ªô l·ªçc an to√†n`);
      } else {
        console.log(`   ‚ö†Ô∏è  NGUY√äN NH√ÇN: L·ªói kh√¥ng x√°c ƒë·ªãnh`);
      }
      
      failedModels.push({ name: modelInfo.name, error: error.message });
    }
  }
  
  // 3. T·ªïng k·∫øt
  console.log('\n' + '='.repeat(60));
  console.log('üìä T·ªîNG K·∫æT');
  console.log('='.repeat(60));
  console.log(`‚úÖ Th√†nh c√¥ng: ${successCount}/${models.length} models`);
  console.log(`‚ùå Th·∫•t b·∫°i: ${failedModels.length}/${models.length} models`);
  
  if (failedModels.length > 0) {
    console.log('\n‚ùå C√°c models th·∫•t b·∫°i:');
    failedModels.forEach(m => {
      console.log(`   - ${m.name}: ${m.error}`);
    });
  }
  
  // 4. Khuy·∫øn ngh·ªã
  console.log('\nüí° KHUY·∫æN NGH·ªä:');
  if (successCount === 0) {
    console.log('   ‚ö†Ô∏è  T·∫§T C·∫¢ MODELS ƒê·ªÄU TH·∫§T B·∫†I!');
    console.log('   üîß H√†nh ƒë·ªông c·∫ßn l√†m:');
    console.log('      1. Ki·ªÉm tra k·∫øt n·ªëi internet');
    console.log('      2. Ki·ªÉm tra API key t·∫°i: https://aistudio.google.com/app/apikey');
    console.log('      3. T·∫°o API key m·ªõi n·∫øu key hi·ªán t·∫°i b·ªã v√¥ hi·ªáu h√≥a');
    console.log('      4. Ki·ªÉm tra quota/rate limit c·ªßa API key');
    console.log('      5. ƒê·ª£i 1-5 ph√∫t n·∫øu b·ªã rate limit r·ªìi ch·∫°y l·∫°i script n√†y');
  } else if (successCount < models.length) {
    console.log('   ‚ö†Ô∏è  M·ªòT S·ªê MODELS TH·∫§T B·∫†I');
    console.log('   üîß Khuy·∫øn ngh·ªã:');
    console.log('      - S·ª≠ d·ª•ng model th√†nh c√¥ng cho ·ª©ng d·ª•ng');
    console.log('      - C·∫≠p nh·∫≠t code ƒë·ªÉ d√πng model ƒëang ho·∫°t ƒë·ªông');
  } else {
    console.log('   ‚úÖ T·∫§T C·∫¢ MODELS HO·∫†T ƒê·ªòNG B√åNH TH∆Ø·ªúNG!');
    console.log('   üéâ API key c·ªßa b·∫°n ƒëang ho·∫°t ƒë·ªông t·ªët');
  }
  
  // 5. Test rate limit
  console.log('\nüìã B∆Ø·ªöC 3: Test Rate Limit (g·ª≠i 3 requests li√™n ti·∫øp)');
  console.log('‚îÄ'.repeat(60));
  
  const testModel = 'gemini-1.5-flash'; // Model ph·ªï bi·∫øn nh·∫•t
  let rateLimitHit = false;
  
  for (let i = 1; i <= 3; i++) {
    try {
      console.log(`\nüîÑ Request ${i}/3...`);
      const genAI = new GoogleGenerativeAI(apiKey);
      const model = genAI.getGenerativeModel({ model: testModel });
      
      const startTime = Date.now();
      const result = await model.generateContent(`Test ${i}: Tr·∫£ l·ªùi ng·∫Øn g·ªçn s·ªë ${i}`);
      const response = await result.response;
      const duration = Date.now() - startTime;
      
      console.log(`   ‚úÖ Th√†nh c√¥ng (${duration}ms)`);
      
      // ƒê·ª£i 500ms gi·ªØa c√°c requests
      if (i < 3) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
    } catch (error) {
      console.log(`   ‚ùå Th·∫•t b·∫°i: ${error.message}`);
      if (error.message?.includes('quota') || error.message?.includes('RESOURCE_EXHAUSTED')) {
        rateLimitHit = true;
        console.log(`   ‚ö†Ô∏è  ƒê√É CH·∫†M RATE LIMIT t·∫°i request ${i}!`);
        break;
      }
    }
  }
  
  if (rateLimitHit) {
    console.log('\n‚ö†Ô∏è  PH√ÅT HI·ªÜN RATE LIMIT!');
    console.log('üí° Gi·∫£i ph√°p:');
    console.log('   - Th√™m delay gi·ªØa c√°c requests trong code');
    console.log('   - Gi·∫£m s·ªë l∆∞·ª£ng requests');
    console.log('   - N√¢ng c·∫•p l√™n API key c√≥ quota cao h∆°n');
    console.log('   - ƒê·ª£i quota reset (th∆∞·ªùng l√† 1 ph√∫t)');
  } else {
    console.log('\n‚úÖ Kh√¥ng ph√°t hi·ªán rate limit trong test ng·∫Øn h·∫°n');
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ HO√ÄN TH√ÄNH KI·ªÇM TRA');
  console.log('='.repeat(60));
}

// Ch·∫°y ki·ªÉm tra
checkGeminiStatus().catch(error => {
  console.error('\nüí• L·ªñI NGHI√äM TR·ªåNG:', error);
  console.error('Stack trace:', error.stack);
});
