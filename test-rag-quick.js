/**
 * Quick RAG + Gemini Test
 * Test nhanh ƒë·ªÉ ki·ªÉm tra RAG c√≥ ho·∫°t ƒë·ªông v·ªõi Gemini kh√¥ng
 */

import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";
import fs from "fs";
import path from "path";

dotenv.config({ path: '.env.local' });

console.log('üß™ QUICK RAG + GEMINI TEST\n');

// Load RAG data
const ragDataPath = path.join(process.cwd(), 'app', 'public', 'data', 'rag_all.json');
const ragData = JSON.parse(fs.readFileSync(ragDataPath, 'utf-8'));

console.log(`‚úì Loaded ${ragData.length} entries from RAG database`);

// Check API key
const apiKey = process.env.GEMINI_API_KEY;
console.log(`‚úì API Key: ${apiKey ? 'Found' : 'NOT FOUND'}`);

if (!apiKey) {
  console.error('\n‚ùå Please add GEMINI_API_KEY to .env.local file');
  process.exit(1);
}

// Test question
const testQuestion = "Con t√¥i ch∆°i game nhi·ªÅu, t√¥i ph·∫£i l√†m sao?";
console.log(`\nüìù Test question: "${testQuestion}"`);

// Filter parent entries
const parentEntries = ragData.filter(e => e.audience === 'parent');
console.log(`‚úì Found ${parentEntries.length} parent entries`);

// Find relevant entry (simple keyword search)
const relevantEntry = parentEntries.find(e => 
  e.meta?.question?.toLowerCase().includes('game') ||
  e.meta?.question?.toLowerCase().includes('ch∆°i')
);

if (!relevantEntry) {
  console.error('‚ùå No relevant entry found');
  process.exit(1);
}

console.log(`‚úì Found relevant entry: "${relevantEntry.meta.question}"`);

// Build prompt
const context = `C√¢u h·ªèi t∆∞∆°ng t·ª±: ${relevantEntry.meta.question}
Tr·∫£ l·ªùi m·∫´u: ${relevantEntry.meta.answer}`;

const prompt = `B·∫°n l√† tr·ª£ l√Ω t√¢m l√Ω h·ªçc ƒë∆∞·ªùng cho ph·ª• huynh.

D·ª±a v√†o th√¥ng tin sau:
${context}

C√¢u h·ªèi: ${testQuestion}

H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† h·ªØu √≠ch.`;

console.log('\nü§ñ Calling Gemini API...');

// Call Gemini
async function test() {
  try {
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
    
    const startTime = Date.now();
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    const duration = Date.now() - startTime;
    
    console.log(`‚úì Response received in ${duration}ms\n`);
    console.log('‚îÄ'.repeat(60));
    console.log('üì§ RESPONSE:');
    console.log('‚îÄ'.repeat(60));
    console.log(text);
    console.log('‚îÄ'.repeat(60));
    
    console.log('\n‚úÖ TEST PASSED! RAG + Gemini is working correctly.');
    
  } catch (error) {
    console.error('\n‚ùå TEST FAILED');
    console.error('Error:', error.message);
    process.exit(1);
  }
}

test();
